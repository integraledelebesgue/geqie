"""
Django settings for testDjango project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-5d^frof^@!qferbrxi$218ke0!&4p4j*=dex(d+xeoufnf-k8o'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'main',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gui.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gui.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'main/static/geqie/'
STATICFILES_DIRS = [BASE_DIR / 'main/static/geqie/']

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s',
            'datefmt': "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'DEBUG',
        },
        'file': {
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'verbose',
            'level': 'ERROR',
            'filename': os.path.join(BASE_DIR, 'logs', 'error.log'),
            'when': 'midnight',     # Rotation every day at midnight
            'interval': 30,         # Keep 30 days
            'backupCount': 2,       # Keep 1 backup
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': True,
        },
        'main': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'frontend_logs': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_TEMPLATE_PACK = 'bootstrap5'

DEFAULT_INIT = {
    "__init__.py": (
        "from .init import init as init_function\n"
        "from .data import data as data_function\n"
        "from .map import map as map_function\n"
        "from .retrieve import retrieve as retrieve_function"
    ),
}

DEFAULT_METHODS_CONTENT = {
    "init": """import numpy as np
from qiskit.quantum_info import Statevector

def init(n_qubits: int) -> Statevector:    
    qubits_in_superposition = # place number of qubits in superposition
    base_state = np.zeros(2**qubits_in_superposition, dtype=int)    
    base_state[0] = 1    
    state = np.tile(base_state, 2**(n_qubits - qubits_in_superposition))
    return Statevector(state)""",
    
    "map": """import numpy as np
from qiskit.quantum_info import Operator

def map(u: int, v: int, R: int, image: np.ndarray) -> Operator:    
    p = image[u, v]  
    # Provide your own unitary matrix for map operator
    return Operator(map_operator)""",
    
    "data": """import numpy as np
from qiskit.quantum_info import Statevector

def data(u: int, v: int, R: int, image: np.ndarray) -> Statevector:    
    m = u * image.shape[0] + v    
    data_vector = np.zeros(2**(2 * R))    
    data_vector[m] = 1    
    return Statevector(data_vector)""",
    
    "retrieve": """import numpy as np
import json
 
def retrieve(results: str) -> np.ndarray:
    \"""
    Decodes an image from quantum state measurement results.
    \"""
    state_length = len(next(iter(results)))
    # color_qubits = set qubits used for color encoding
    number_of_position_qubits = state_length - color_qubits
    x_qubits = number_of_position_qubits // 2
    y_qubits = number_of_position_qubits // 2
    image_shape = (2**x_qubits, 2**y_qubits)
    
    # Provide your own code here...
    return reconstructed_image"""
}

MEDIA_URL = 'grayscale/'

#Docker path
MEDIA_ROOT = os.path.join(BASE_DIR, 'assets', 'test_images')
#MEDIA_ROOT = os.path.join(BASE_DIR, '..', 'assets', 'test_images')

#Docker path
ENCODINGS_DIR = os.path.abspath(os.path.join(BASE_DIR, "geqie", "encodings"))
#ENCODINGS_DIR = os.path.abspath(os.path.join(BASE_DIR, "..", "geqie", "encodings"))